package main.p840;

/** Calculate loss in db/km due to clouds and fog
 * 
 * @author Collin Thornton
 * @note Based on Rec. ITU-R P.840-8, sections 1-2
 */
public class CloudsAttenuationCalculator {
	
	/** Calculate loss in db/km due to clouds and fog
	 * 
	 * @param f__ghz Frequency. (GHz) 0 <= f <= 200
	 * @param theta_0__rad Elevation angle (Rad)
	 * @param T__k   Temperature of cloud (k)
	 * @param  Density of water vapor in cloud (g/m^3)
	 * @return db/km due to clouds.
	 * @note This function is based on Rec. ITU-R P.840-8, sections 1-2
	 */
	public static double calculate(double f__ghz, double theta_0__rad, double T__k, double L__kg_m2) {
		if(f__ghz < 0.0)   throw new IllegalArgumentException("Cloud atten. freq must be between 0 and 200 GHz");
		if(f__ghz > 200.0) throw new IllegalArgumentException("Cloud atten. freq must be between 0 and 200 GHz");
			
		double theta = 300.0/T__k;
		double e_2 = 3.52;
		double e_0 = 77.66 + 103.3*(theta-1.0);
		double e_1 = 0.0671*e_0;
		
		double f_p = 20.20 - 146.0*(theta-1.0) + 316.0*(theta-1.0)*(theta-1.0);
		double f_s = 39.8*f_p;
		
		double e_prime = (e_0-e_1)/(1+(f__ghz/f_p)*(f__ghz/f_p)) + (e_1-e_2)/(1+(f__ghz/f_s)*(f__ghz/f_s)) + e_2;
		double e_pprime = (f__ghz*(e_0-e_1))/(f_p*(1.0+(f__ghz/f_p)*(f__ghz/f_p))) + (f__ghz*(e_1-e_2))/(f_s*(1.0+(f__ghz/f_s)*(f__ghz/f_s)));
		double nu = (2.0+e_prime)/e_pprime;
		
		double K_i = (0.819*f__ghz)/(e_pprime*(1.0+nu*nu));
		return (K_i*L__kg_m2)/Math.sin(theta_0__rad);		
	}
}
